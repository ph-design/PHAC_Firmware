;
; Copyright (c) 2023 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;
.pio_version 0 // only requires PIO version 0

.program quadrature_encoder

; the code must be loaded at address 0, because it uses computed jumps
.origin 0

; Enhanced version with debounce capability
; Works the same as original but with configurable debounce timing

; 00 state
    JMP update    ; read 00
    JMP decrement ; read 01
    JMP increment ; read 10
    JMP update    ; read 11

; 01 state
    JMP increment ; read 00
    JMP update    ; read 01
    JMP update    ; read 10
    JMP decrement ; read 11

; 10 state
    JMP decrement ; read 00
    JMP update    ; read 01
    JMP update    ; read 10
    JMP increment ; read 11

; 11 state
    JMP update    ; read 00
    JMP increment ; read 01
decrement:
    JMP Y--, update ; read 10

    ; this is where the main loop starts
.wrap_target
update:
    MOV ISR, Y      ; read 11
    PUSH noblock

sample_pins:
    ; Enhanced sampling with implicit debounce via clock division
    OUT ISR, 2
    IN PINS, 2

    ; save the state in the OSR
    MOV OSR, ISR
    ; jump to the correct state machine action
    MOV PC, ISR

increment:
    MOV Y, ~Y
    JMP Y--, increment_cont
increment_cont:
    MOV Y, ~Y
.wrap

% c-sdk {

#include "hardware/clocks.h"
#include "hardware/gpio.h"

// Enhanced init function with debounce capability
// max_step_rate: maximum step rate (0 for max speed)
// debounce: enable debounce for mechanical encoders
// debounce_level: debounce strength (1-10, higher = more debounce)

static inline void quadrature_encoder_program_init(PIO pio, uint sm, uint pin, 
    int max_step_rate, bool debounce, int debounce_level)
{
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);

    gpio_pull_up(pin);
    gpio_pull_up(pin + 1);

    pio_sm_config c = quadrature_encoder_program_get_default_config(0);

    sm_config_set_in_pins(&c, pin);
    sm_config_set_jmp_pin(&c, pin);
    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);

    float div;
    
    if (debounce) {
        // Debounce mode: use slower clock for stability
        // debounce_level controls the amount of debouncing
        if (debounce_level < 1) debounce_level = 1;
        if (debounce_level > 10) debounce_level = 10;
        
        // Base debounce divisor, scaled by level
        div = 1000.0f * debounce_level;
        
        // If max_step_rate is specified, ensure we don't exceed it
        if (max_step_rate > 0) {
            float max_div = (float)clock_get_hz(clk_sys) / (10 * max_step_rate);
            if (div < max_div) {
                div = max_div;
            }
        }
    } else {
        // Normal high-speed mode
        if (max_step_rate == 0) {
            div = 1.0f;
        } else {
            div = (float)clock_get_hz(clk_sys) / (10 * max_step_rate);
        }
    }

    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, 0, &c);
    pio_sm_set_enabled(pio, sm, true);
}

// Convenience function for mechanical encoders with default debounce
static inline void quadrature_encoder_mechanical_init(PIO pio, uint sm, uint pin)
{
    quadrature_encoder_program_init(pio, sm, pin, 0, true, 3);
}


static inline int32_t quadrature_encoder_get_count(PIO pio, uint sm)
{
    uint ret;
    int n;

    // Drain FIFO to get fresh sample
    n = pio_sm_get_rx_fifo_level(pio, sm) + 1;
    while (n > 0) {
        ret = pio_sm_get_blocking(pio, sm);
        n--;
    }
    return ret;
}

%}
